#ifndef __THINLENS__
#define __THINLENS__

#include "Camera.h"
#include "Sampler.h"
#include "World.h"

class ThinLens : public Camera {

public:
  ThinLens();
  ThinLens(const ThinLens& tl);
  ThinLens& operator= (const ThinLens& rhs);
  virtual ~ThinLens();
  virtual ThinLens* clone() const;
  Vector3d ray_direction(const Vector2d& pixel_point, const Vector2d& lens_point) const;
  virtual void render_scene(World& w, FILE *fp);
  void set_sampler(Sampler* sp);
  void set_lens_radius(const float lens_radius);
  void set_view_distance(const float d);
  void set_focal_distance(const float f);
  void set_zoom(const float zoom);

private:
  float lens_radius;            // lens radius
  float d;                      // view plane distance
  float f;                      // focal plane distance
  float zoom;                   // zoom factor
  Sampler* sampler_ptr;         // sampler object

};


inline void ThinLens::set_lens_radius(const float lens_radius) {
  this->lens_radius = lens_radius;
}

inline void ThinLens::set_view_distance(const float d) {
  this->d = d;
}

inline void ThinLens::set_focal_distance(const float f) {
  this->f = f;
}


inline void ThinLens::set_zoom(const float zoom) {
  this->zoom = zoom;
}


#endif
